// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  firstName            String    @db.VarChar(50)
  lastName             String    @db.VarChar(50)
  email                String?   @unique @db.VarChar(255)
  phone                String?   @unique @db.VarChar(20)
  googleId             String?   @unique @db.VarChar(255)
  password             String    @db.VarChar(255)
  profilePicture       String?   @db.VarChar(500)
  bio                  String?   @db.VarChar(500)
  location             String?   @db.VarChar(100)
  dateOfBirth          DateTime?
  gender               Gender    @default(PREFER_NOT_TO_SAY)
  interests            Interest[]
  socialLinks          SocialLinks?
  isVerified           Boolean   @default(false)
  verificationToken    String?   @unique @db.VarChar(255)
  verificationTokenExpires DateTime?
  resetPasswordToken   String?   @unique @db.VarChar(255)
  resetPasswordExpires DateTime?
  lastLogin            DateTime  @default(now())
  loginAttempts        Int       @default(0)
  lockUntil            DateTime?
  isActive             Boolean   @default(true)
  role                 Role      @default(USER)
  earnings             Earnings?
  stats                UserStats?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  contents             Content[]
  books Book[]
  audio Audio[]
  chapters Chapter[]
  audioChapters AudioChapter[]
  audioParts AudioPart[]


  @@map("users")
}

model SocialLinks {
  id        String   @id @default(cuid())
  userId    String   @unique
  instagram String?  @db.VarChar(255)
  twitter   String?  @db.VarChar(255)
  facebook  String?  @db.VarChar(255)
  youtube   String?  @db.VarChar(255)
  tiktok    String?  @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("social_links")
}

model Earnings {
  id        String   @id @default(cuid())
  userId    String   @unique
  total     Float    @default(0)
  pending   Float    @default(0)
  withdrawn Float    @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("earnings")
}

model UserStats {
  id           String   @id @default(cuid())
  userId       String   @unique
  totalViews   Int      @default(0)
  totalLikes   Int      @default(0)
  totalShares  Int      @default(0)
  totalContent Int      @default(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user_stats")
}

model Content {
  id          String      @id @default(cuid())
  title       String      @db.VarChar(255)
  description String?     @db.Text
  type        ContentType
  category    String      @db.VarChar(100)
  tags        String[]    @default([])
  fileUrl     String      @db.VarChar(500)
  thumbnailUrl String?    @db.VarChar(500)
  duration    Int?        // in seconds
  views       Int         @default(0)
  likes       Int         @default(0)
  shares      Int         @default(0)
  isPublished Boolean     @default(false)
  isApproved  Boolean     @default(false)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("contents")
}

model UserInterest {
  id     String @id @default(cuid())
  userId String
  interest Interest

  @@unique([userId, interest])
  @@map("user_interests")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum Role {
  USER
  CREATOR
  ADMIN
  MODERATOR
}

enum ContentType {
  FILM
  PODCAST
  POETRY
  MUSIC
  PHOTOGRAPHY
  ART
}

enum Interest {
  FILM
  POETRY
  PODCAST
  MUSIC
  PHOTOGRAPHY
  ART
  TECHNOLOGY
  EDUCATION
  SOCIAL_COMMENTARY
  ENTERTAINMENT
}

enum BookStatus {
  DRAFT
  PUBLISHED
}
model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  isbn        String?   @unique
  tags        String[] // array of tags like ["fiction", "history"]
  subCategories String[] @default([])
  description String?
  publishedAt DateTime?

  coverImage  String?  
  coverImagePublicId String?
  bookFile    String?
  bookFilePublicId   String?  
  readUrl           String?   // for reading inline
  downloadUrl       String?   // for downloading

  content     String?   @db.Text   // To store the rich text (HTML) from the editor
  status      BookStatus @default(DRAFT) // Default new books to DRAFT
  category    String?   @db.VarChar(100)
  
  userId      String? 
  user        User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  chapters    Chapter[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  content     String?  @db.Text // Rich text content
  order       Int      // Chapter order in the book
  status      ChapterStatus @default(DRAFT)
  isPublished Boolean  @default(false)
  
  // Chapter metadata
  wordCount   Int?     // Optional word count
  readingTime Int?     // Estimated reading time in minutes
  
  // Relations
  bookId      String
  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([bookId, order]) // Ensure unique chapter order per book
  @@map("chapters")
}

enum ChapterStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AudioStatus {
  DRAFT
PUBLISHED
}

model Audio {
  id        String   @id @default(cuid())
  title       String?
  description String?
  status      AudioStatus @default(DRAFT) 
  tags        String[] @default([])
  subCategories String[] @default([])
  fileName    String
  publicId  String?
  fileUrl   String
  segmentUrls      String[] @default([])
  segmentPublicIds String[] @default([])
  totalDuration    Int?
  category  String?   @db.VarChar(100)
  user      User?@relation(fields: [userId], references: [id],onDelete:Cascade)
  userId    String?
  
  // Relations
  chapters  AudioChapter[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AudioChapter {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  order       Int      // Chapter order in the audio book
  status      AudioChapterStatus @default(DRAFT)
  isPublished Boolean  @default(false)
  
  // Chapter metadata
  duration   Int?     // Duration in seconds
  wordCount  Int?     // Optional word count for transcript
  
  // Relations
  audioId    String
  audio      Audio    @relation(fields: [audioId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parts      AudioPart[]
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([audioId, order]) // Ensure unique chapter order per audio book
  @@map("audio_chapters")
}

model AudioPart {
  id          String   @id @default(cuid())
  title       String?
  description String?  @db.Text
  order       Int      // Part order within the chapter
  status      AudioPartStatus @default(DRAFT)
  isPublished Boolean  @default(false)
  
  // Audio file details
  fileName    String
  publicId    String?
  fileUrl     String
  duration    Int?     // Duration in seconds
  
  // Relations
  chapterId   String
  chapter     AudioChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([chapterId, order]) // Ensure unique part order per chapter
  @@map("audio_parts")
}

enum AudioChapterStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AudioPartStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}


